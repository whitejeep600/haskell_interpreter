-- File generated by the BNF Converter (bnfc 2.9.4).

-- | Program to test parser.

module Main where

import Prelude
  ( ($), (.)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile, Maybe (Just, Nothing)
  )
import System.Environment ( getArgs )
import System.Exit        ( exitFailure )
import Control.Monad      ( when )

import AbsGrammar   (Program)
import LexGrammar   ( Token, mkPosToken )
import ParGrammar   ( pProgram, myLexer )
import PrintGrammar ( Print, printTree )
import SkelGrammar  ()
import TypeChecker
import GHC.IO.Handle.Text
import GHC.IO.Handle.FD (stderr)
import Control.Monad.Except
import Denotations (progDenotation)

type Err        = Either String
type ParseFun = [Token] -> Err Program 
type Verbosity  = Int

runFile ::  ParseFun  -> FilePath -> IO ()
runFile p f = putStrLn f >> readFile f >>= run p

writeError :: String -> IO ()
writeError =  hPutStrLn stderr

run :: ParseFun  -> String -> IO ()
run p s =
  case p ts of
    Left err -> do
      writeError err
      exitFailure
    Right tree -> do
      case typecheck tree of
        Just err -> writeError err
        Nothing -> do
          res <- runExceptT $ progDenotation tree
          case res of
            Left err -> do
              writeError err
            Right s -> do
              putStrLn ""

  where
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    []         -> getContents >>= run pProgram
    "-s":fs    -> mapM_ (runFile pProgram) fs
    fs         -> mapM_ (runFile pProgram) fs


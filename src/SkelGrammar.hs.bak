-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammar.Ident -> Result
transIdent x = case x of
  AbsGrammar.Ident string -> failure x

transProgram :: Show a => AbsGrammar.Program' a -> Result
transProgram x = case x of
  AbsGrammar.Prog _ fundecls main -> failure x

transMain :: Show a => AbsGrammar.Main' a -> Result
transMain x = case x of
  AbsGrammar.DMain _ block -> failure x

transFunDecl :: Show a => AbsGrammar.FunDecl' a -> Result
transFunDecl x = case x of
  AbsGrammar.DFun _ type_ ident argdecls block -> failure x

transDecl :: Show a => AbsGrammar.Decl' a -> Result
transDecl x = case x of
  AbsGrammar.DFunDecl _ fundecl -> failure x
  AbsGrammar.DVarDecl _ type_ ident exp -> failure x
  AbsGrammar.DConstVarDecl _ type_ ident exp -> failure x

transArgDecl :: Show a => AbsGrammar.ArgDecl' a -> Result
transArgDecl x = case x of
  AbsGrammar.DArgDecl _ type_ ident -> failure x
  AbsGrammar.DConstArgDecl _ type_ ident -> failure x

transBlock :: Show a => AbsGrammar.Block' a -> Result
transBlock x = case x of
  AbsGrammar.IBlock _ decls instrs -> failure x

transInstr :: Show a => AbsGrammar.Instr' a -> Result
transInstr x = case x of
  AbsGrammar.IAss _ ident exp -> failure x
  AbsGrammar.IIf _ exp instr else_ -> failure x
  AbsGrammar.IWhile _ exp instr -> failure x
  AbsGrammar.IPrStr _ exp -> failure x
  AbsGrammar.IRet _ exp -> failure x
  AbsGrammar.IBreak _ -> failure x
  AbsGrammar.IRaise _ ident -> failure x
  AbsGrammar.IContinue _ -> failure x
  AbsGrammar.ITryBlock _ block1 ident idents block2 -> failure x
  AbsGrammar.IBlockInstr _ block -> failure x
  AbsGrammar.IExp _ exp -> failure x

transElse :: Show a => AbsGrammar.Else' a -> Result
transElse x = case x of
  AbsGrammar.IElseEmpty _ -> failure x
  AbsGrammar.IElse _ instr -> failure x

transExp :: Show a => AbsGrammar.Exp' a -> Result
transExp x = case x of
  AbsGrammar.EOr _ exp1 exp2 -> failure x
  AbsGrammar.IAnd _ exp1 exp2 -> failure x
  AbsGrammar.EEq _ exp1 exp2 -> failure x
  AbsGrammar.ENeq _ exp1 exp2 -> failure x
  AbsGrammar.ELeq _ exp1 exp2 -> failure x
  AbsGrammar.EGeq _ exp1 exp2 -> failure x
  AbsGrammar.ELess _ exp1 exp2 -> failure x
  AbsGrammar.EGrt _ exp1 exp2 -> failure x
  AbsGrammar.EPlus _ exp1 exp2 -> failure x
  AbsGrammar.ENeg _ integer -> failure x
  AbsGrammar.EMinus _ exp1 exp2 -> failure x
  AbsGrammar.EConcat _ exp1 exp2 -> failure x
  AbsGrammar.ETimes _ exp1 exp2 -> failure x
  AbsGrammar.EDiv _ exp1 exp2 -> failure x
  AbsGrammar.ENot _ exp -> failure x
  AbsGrammar.EInt _ integer -> failure x
  AbsGrammar.EBool _ bool -> failure x
  AbsGrammar.EStr _ string -> failure x
  AbsGrammar.EIdent _ ident -> failure x
  AbsGrammar.EFuncall _ ident args -> failure x

transArg :: Show a => AbsGrammar.Arg' a -> Result
transArg x = case x of
  AbsGrammar.AVal _ exp -> failure x
  AbsGrammar.ARef _ ident -> failure x

transType :: Show a => AbsGrammar.Type' a -> Result
transType x = case x of
  AbsGrammar.TBool _ -> failure x
  AbsGrammar.TInt _ -> failure x
  AbsGrammar.TStr _ -> failure x

transBool :: Show a => AbsGrammar.Bool' a -> Result
transBool x = case x of
  AbsGrammar.BTrue _ -> failure x
  AbsGrammar.BFalse _ -> failure x

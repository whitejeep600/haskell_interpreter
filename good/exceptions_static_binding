def int safediv(const int a, const int b){  // safediv promises not to change the values referenced by a and b
  if b == 0 then
    raise divisionByZero;
  else
    return a / b;
  fi;
};

def int one(){
  return 1;
};

def int identity(const int x){
  return x;
};

def int decrement(int x){
  x = identity(x) - 1;
  return 0;
};

main{
  int x = 0; // the original x
  int y = 0;
  int i = 0;
  int sum = 0;
  bool caught_exception = false;
  def int increment_x(){
    x = x+1;
    return x;
  };
  
  def int increment_i(){
    int x = i;  // x is shadowed
    bool y = false;
    int x_before_call = x;
    increment_x();
    if x_before_call != x then
      print "error! function increment_x has variable x bound to the shadowed x, and not to the original x";
    fi;
    x = x+1;
    i = x;
    return x;
  };
  
  x = 20000;
  y = 30;
  i = 0;
  sum = 0;
  while i != 100 do
    try{
        sum = sum + safediv(ref x, ref y);
        increment_i();
        x = x - one();
        decrement(ref y);
      };
    except divisionByZero{
      sum = sum + 100;
      caught_exception = true;
      break ;
    };
  if caught_exception then
    sum = sum + 9;
    fi;
  print sum;
};
